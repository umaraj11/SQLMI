version: 2.1

orbs:
  terraform: circleci/terraform@3.0.1
  powershell: circleci/microsoft-psscriptanalyzer@1.0.0

parameters:
  deploy:
    type: boolean
    default: false
  environment:
    type: string
    default: ""

workflows:
  version: 2
  terraform_ci:
    when:
      or:
        - not:
            matches:
              pattern: "^main$"
              value: << pipeline.git.branch >>
        - equal: [shared_repo, << pipeline.parameters.environment >>]

    jobs:
      - replace-tokens:
          context: co-infra-bofa-sql-staging

      - fmt-init-validate-plan:
          context: co-infra-bofa-sql-staging
          requires:
            - replace-tokens

      - hold-apply:
          type: approval
          requires:
            - fmt-init-validate-plan

      - apply:
          context: co-infra-bofa-sql-staging
          requires:
            - hold-apply

      - hold-destroy:
          type: approval
          requires:
            - apply

      - destroy:
          context: co-infra-bofa-sql-staging
          requires:
            - hold-destroy

  continuous_delivery:
    when:
      and:
        - not: << pipeline.parameters.deploy >>
        - not:
            equal: [shared_repo, << pipeline.parameters.environment >>]
    jobs:
      - release:
          context: co-infra-bofa-sql-api
          environment: staging
          filters:
            branches:
              only: main

  staging_release:
    when:
      and:
        - << pipeline.parameters.deploy >>
        - equal: [staging, << pipeline.parameters.environment >>]
    jobs:
      - replace-tokens:
          context: co-infra-bofa-sql-staging

      - fmt-init-validate-plan:
          context: co-infra-bofa-sql-staging
          requires:
            - replace-tokens

      - apply:
          context: co-infra-bofa-sql-staging
          requires:
            - fmt-init-validate-plan

      - release:
          context: co-infra-bofa-sql-api
          environment: development
          filters:
            branches:
              only: main
          requires:
            - apply

  development_release:
    when:
      and:
        - << pipeline.parameters.deploy >>
        - equal: [development, << pipeline.parameters.environment >>]
    jobs:
      - replace-tokens:
          context: co-infra-bofa-sql-development

      - fmt-init-validate-plan:
          context: co-infra-bofa-sql-development
          requires:
            - replace-tokens

      - apply:
          context: co-infra-bofa-sql-development
          requires:
            - fmt-init-validate-plan

      - hold-uat-release:
          type: approval
          requires:
            - apply

      - release:
          context: co-infra-bofa-sql-api
          environment: testing
          filters:
            branches:
              only: main
          requires:
            - hold-uat-release

  testing_release:
    when:
      and:
        - << pipeline.parameters.deploy >>
        - equal: [testing, << pipeline.parameters.environment >>]
    jobs:
      - replace-tokens:
          context: co-infra-bofa-sql-uat

      - fmt-init-validate-plan:
          context: co-infra-bofa-sql-uat
          requires:
            - replace-tokens

      - apply:
          context: co-infra-bofa-sql-uat
          requires:
            - fmt-init-validate-plan

      - hold-prod-release:
          type: approval
          requires:
            - apply

      - release:
          context: co-infra-bofa-sql-api
          environment: prod
          filters:
            branches:
              only: main
          requires:
            - hold-prod-release

  production_release:
    when:
      and:
        - << pipeline.parameters.deploy >>
        - equal: [prod, << pipeline.parameters.environment >>]
    jobs:
      - replace-tokens:
          context: co-infra-bofa-sql-prod

      - fmt-init-validate-plan:
          context: co-infra-bofa-sql-prod
          requires:
            - replace-tokens

      - apply:
          context: co-infra-bofa-sql-prod
          requires:
            - fmt-init-validate-plan

jobs:
  replace-tokens:
    executor:
      name: powershell/linux
      tag: 7.2.1-ubuntu-20.04
    steps:
      - checkout
      - run:
          name: inject branch number
          shell: pwsh
          command: |
            if ($env:CIRCLE_BRANCH -ne 'main') {
              $branchIdentifier = $env:CIRCLE_BRANCH -replace "[^0-9]", ""
            } else {
              $branchIdentifier = ''
            }
            $tokens = Get-Content tokens.json | ConvertFrom-Json
            $addMemberParams = @{
              Name        = 'branch'
              Value       = $branchIdentifier
              MemberType  = 'NoteProperty'
              InputObject = $tokens.variables
            }
            Add-Member @addMemberParams
            Set-Content -Path tokens.json -Value ($tokens | ConvertTo-Json)
            if ($Error.Count -gt 0) {throw}
      - run:
          name: replace tokens
          shell: pwsh
          command: |
            $replaceTokenParams = @{
              SourcePath    = "./default/global.auto.tfvars"
              UniversalPath = "tokens.json"
              InstancePath  = "tokens.$env:TF_VAR_environment.json"
            }
            & ./replace-token/Replace-Token.ps1 @replaceTokenParams
      - persist_to_workspace:
          root: .
          paths:
            - .

  fmt-init-validate-plan:
    circleci_ip_ranges: true
    executor:
      name: terraform/default
      tag: 1.1.9
    steps:
      - attach_workspace:
          at: .
      - terraform/fmt:
          path: default
          recursive: true
      - run:
          name: terraform init
          command: |
            if [ $CIRCLE_BRANCH = 'main' ]; then
              KEY=$CIRCLE_BRANCH
            else
              KEY=$CIRCLE_USERNAME-${CIRCLE_BRANCH//[^0-9]/}
            fi
            cd default
            terraform init -input=false \
            -backend-config=use_msi=true \
            -backend-config=resource_group_name=$STATE_RESOURCE_GROUP \
            -backend-config=storage_account_name=$STATE_STORAGE_ACCOUNT \
            -backend-config=container_name=$STATE_CONTAINER \
            -backend-config=key=$KEY
      - terraform/validate:
          path: default
      - run:
          name: terraform plan
          command: |
            #!/bin/sh -eo pipefail
            #!/bin/bash
            # Check CLI config file
            TF_PARAM_PATH=default
            if [[ -n "${TF_PARAM_CLI_CONFIG_FILE}" ]]; then
                if [[ -f "${TF_PARAM_CLI_CONFIG_FILE}" ]]; then
                    export TF_CLI_CONFIG_FILE=${TF_PARAM_CLI_CONFIG_FILE}
                else
                    echo "Terraform cli config does not exist: ${TF_PARAM_CLI_CONFIG_FILE}"
                    exit 1
                fi
            fi
            # 'path' is a required parameter, save it as module_path
            readonly module_path="${TF_PARAM_PATH}"
            export path=$module_path
            if [[ ! -d "$module_path" ]]; then
              echo "Path does not exist: $module_path"
              exit 1
            fi
            # the following is needed to process backend configs
            if [[ -n "${TF_PARAM_BACKEND_CONFIG_FILE}" ]]; then
                for file in $(echo "${TF_PARAM_BACKEND_CONFIG_FILE}" | tr ',' '\n'); do
                    if [[ -f "$module_path/$file" ]]; then
                        INIT_ARGS="$INIT_ARGS -backend-config=$file"
                    else
                        echo "Backend config '$file' wasn't found" >&2
                        exit 1
                    fi
                done
            fi
            if [[ -n "${TF_PARAM_BACKEND_CONFIG}" ]]; then
                for config in $(echo "${TF_PARAM_BACKEND_CONFIG}" | tr ',' '\n'); do
                    INIT_ARGS="$INIT_ARGS -backend-config=$config"
                done
            fi
            export INIT_ARGS
            readonly workspace_parameter="${TF_PARAM_WORKSPACE}"
            readonly workspace="${TF_WORKSPACE:-$workspace_parameter}"
            export workspace
            unset TF_WORKSPACE
            # shellcheck disable=SC2086
            terraform -chdir="$module_path" init -input=false $INIT_ARGS
            # Test for saving state locally vs a remote state backend storage
            if [[ -n "$workspace_parameter" ]]; then
              echo "[INFO] Provisioning local workspace: $workspace"
              terraform -chdir="$module_path" workspace select "$workspace" || terraform -chdir="$module_path" workspace new "$workspace"
            else
              echo "[INFO] Remote State Backend Enabled"
            fi
            if [[ -n "${TF_PARAM_VAR}" ]]; then
                for var in $(echo "${TF_PARAM_VAR}" | tr ',' '\n'); do
                    PLAN_ARGS="$PLAN_ARGS -var $var"
                done
            fi
            if [[ -n "${TF_PARAM_VAR_FILE}" ]]; then
            for file in $(echo "${TF_PARAM_VAR_FILE}" | tr ',' '\n'); do
                if [[ -f "$module_path/$file" ]]; then
                    PLAN_ARGS="$PLAN_ARGS -var-file=$file"
                else
                    echo "var file '$file' wasn't found" >&2
                    exit 1
                fi
            done
            fi
            export PLAN_ARGS
            # shellcheck disable=SC2086
            terraform -chdir="$module_path" plan -input=false -out=plan.out $PLAN_ARGS
      - persist_to_workspace:
          root: .
          paths:
            - .

  apply:
    circleci_ip_ranges: true
    executor:
      name: terraform/default
      tag: 1.1.9
    steps:
      - attach_workspace:
          at: .
      - terraform/apply:
          path: default
      - persist_to_workspace:
          root: .
          paths:
            - .

  destroy:
    circleci_ip_ranges: true
    executor:
      name: terraform/default
      tag: 1.1.9
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            #!/bin/sh -eo pipefail
            #!/bin/bash
            # Check CLI config file
            TF_PARAM_PATH=default
            if [[ -n "${TF_PARAM_CLI_CONFIG_FILE}" ]]; then
                if [[ -f "${TF_PARAM_CLI_CONFIG_FILE}" ]]; then
                    export TF_CLI_CONFIG_FILE=${TF_PARAM_CLI_CONFIG_FILE}
                else
                    echo "Terraform cli config does not exist: ${TF_PARAM_CLI_CONFIG_FILE}"
                    exit 1
                fi
            fi
            # 'path' is a required parameter, save it as module_path
            readonly module_path="${TF_PARAM_PATH}"
            export path=$module_path
            if [[ ! -d "$module_path" ]]; then
              echo "Path does not exist: $module_path"
              exit 1
            fi
            # Initialize terraform
            if [[ -n "${TF_PARAM_BACKEND_CONFIG_FILE}" ]]; then
                for file in $(echo "${TF_PARAM_BACKEND_CONFIG_FILE}" | tr ',' '\n'); do
                    if [[ -f "$module_path/$file" ]]; then
                        INIT_ARGS="$INIT_ARGS -backend-config=$file"
                    else
                        echo "Backend config '$file' wasn't found" >&2
                        exit 1
                    fi
                done
            fi
            if [[ -n "${TF_PARAM_BACKEND_CONFIG}" ]]; then
                for config in $(echo "${TF_PARAM_BACKEND_CONFIG}" | tr ',' '\n'); do
                    INIT_ARGS="$INIT_ARGS -backend-config=$config"
                done
            fi
            export INIT_ARGS
            # shellcheck disable=SC2086
            terraform -chdir="$module_path" init -input=false $INIT_ARGS
            # Set workspace from parameter, allowing it to be overridden by TF_WORKSPACE.
            # If TF_WORKSPACE is set we don't want terraform init to use the value, in the case we are running new_workspace.sh this would cause an error
            readonly workspace_parameter="${TF_PARAM_WORKSPACE}"
            readonly workspace="${TF_WORKSPACE:-$workspace_parameter}"
            export workspace
            unset TF_WORKSPACE
            rm -rf .terraform
            # The line below is the original place for the init
            # terraform -chdir="$module_path" init -input=false -lock-timeout=300s $INIT_ARGS
            # Test for saving state locally vs a remote state backend storage
            if [[ -n "$workspace_parameter" ]]; then
              echo "[INFO] Provisioning local workspace: $workspace"
              terraform -chdir="$module_path" workspace select "$workspace"
            else
              echo "[INFO] Remote State Backend Enabled"
            fi
            if [[ -n "${TF_PARAM_VAR}" ]]; then
                for var in $(echo "${TF_PARAM_VAR}" | tr ',' '\n'); do
                    PLAN_ARGS="$PLAN_ARGS -var $var"
                done
            fi
            if [[ -n "${TF_PARAM_VAR_FILE}" ]]; then
                for file in $(echo "${TF_PARAM_VAR_FILE}" | tr ',' '\n'); do
                    if [[ -f "$module_path/$file" ]]; then
                        PLAN_ARGS="$PLAN_ARGS -var-file=$file"
                    else
                        echo "Var file '$file' wasn't found" >&2
                        exit 1
                    fi
                done
            fi
            export PLAN_ARGS
            # terraform -chdir="$module_path" init -input=false -lock-timeout=300s $INIT_ARGS
            # shellcheck disable=SC2086
            terraform -chdir="$module_path" apply -destroy -input=false -auto-approve $PLAN_ARGS

  release:
    parameters:
      environment:
        type: string
        default: ""
    circleci_ip_ranges: true
    executor:
      name: powershell/linux
      tag: 7.2.1-ubuntu-20.04
    steps:
      - run:
          name: << parameters.environment >> release
          shell: pwsh
          command: |
            $headers = @{
              "Circle-Token" = $env:CIRCLECI_TOKEN
            }

            $body = @{
              branch = "main"
              parameters = @{
                deploy      = $true
                environment = "<< parameters.environment >>"
              }
            }

            $jsonBody = $body | ConvertTo-Json

            $restParams = @{
              uri         = "https://circleci.com/api/v2/project/$env:VCS_SLUG/$env:ORG_NAME/$env:REPO_NAME/pipeline"
              method      = "POST"
              body        = $jsonBody
              headers     = $headers
              ContentType = "application/json"
            }

            Invoke-RestMethod @restParams
